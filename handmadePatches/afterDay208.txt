diff --git a/code/handmade_debug.cpp b/code/handmade_debug.cpp
index aa1d520..d675396 100644
--- a/code/handmade_debug.cpp
+++ b/code/handmade_debug.cpp
@@ -270,13 +270,13 @@ DEBUGVariableToText(char *Buffer, char *End, debug_variable *Var, u32 Flags)
 
     if(Flags & DEBUGVarToText_AddDebugUI)
     {
-        At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+        At += snprintf(At, (size_t)(End - At),
                           "#define DEBUGUI_");
     }
 
     if(Flags & DEBUGVarToText_AddName)
     {
-        At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+        At += snprintf(At, (size_t)(End - At),
                           "%s%s ", Var->Name, (Flags & DEBUGVarToText_Colon) ? ":" : "");
     }
     
@@ -286,50 +286,50 @@ DEBUGVariableToText(char *Buffer, char *End, debug_variable *Var, u32 Flags)
         {
             if(Flags & DEBUGVarToText_PrettyBools)
             {
-                At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+                At += snprintf(At, (size_t)(End - At),
                                   "%s",
                                   Var->Bool32 ? "true" : "false");
             }
             else
             {
-                At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+                At += snprintf(At, (size_t)(End - At),
                                   "%d", Var->Bool32);
             }
         } break;
 
         case DebugVariableType_Int32:
         {
-            At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+            At += snprintf(At, (size_t)(End - At),
                               "%d", Var->Int32);
         } break;
 
         case DebugVariableType_UInt32:                
         {
-            At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+            At += snprintf(At, (size_t)(End - At),
                               "%u", Var->UInt32);
         } break;
 
         case DebugVariableType_V2:
         {
-            At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+            At += snprintf(At, (size_t)(End - At),
                               "V2(%f, %f)", Var->Vector2.x, Var->Vector2.y);
         } break;
 
         case DebugVariableType_V3:
         {
-            At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+            At += snprintf(At, (size_t)(End - At),
                               "V3(%f, %f, %f)", Var->Vector3.x, Var->Vector3.y, Var->Vector3.z);
         } break;
 
         case DebugVariableType_V4:
         {
-            At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+            At += snprintf(At, (size_t)(End - At),
                               "V4(%f, %f, %f, %f)", Var->Vector4.x, Var->Vector4.y, Var->Vector4.z, Var->Vector4.w);
         } break;
 
         case DebugVariableType_Real32:                
         {
-            At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+            At += snprintf(At, (size_t)(End - At),
                               "%f", Var->Real32);
             if(Flags & DEBUGVarToText_FloatSuffix)
             {
@@ -406,7 +406,7 @@ WriteHandmadeConfig(debug_state *DebugState)
 
                 if(Var->Type == DebugVariableType_VarGroup)
                 {
-                    At += _snprintf_s(At, (size_t)(End - At), (size_t)(End - At),
+                    At += snprintf(At, (size_t)(End - At),
                                       "// ");
                 }
                 At += DEBUGVariableToText(At, End, Var,
@@ -509,8 +509,8 @@ DrawProfileIn(debug_state *DebugState, rectangle2 ProfileRect, v2 MouseP)
             {
                 debug_record *Record = Region->Record;
                 char TextBuffer[256];
-                _snprintf_s(TextBuffer, sizeof(TextBuffer),
-                            "%s: %10ucy [%s(%d)]",
+                snprintf(TextBuffer, sizeof(TextBuffer),
+                            "%s: %10lucy [%s(%d)]",
                             Record->BlockName,
                             Region->CycleCount,
                             Record->FileName,
@@ -676,7 +676,7 @@ internal debug_view *
 GetOrCreateDebugViewFor(debug_state *DebugState, debug_id ID)
 {
     // TODO(casey): Better hash function
-    u32 HashIndex = (((u32)ID.Value[0] >> 2) + ((u32)ID.Value[1] >> 2)) % ArrayCount(DebugState->ViewHash);
+    u32 HashIndex = ((u32)((u64)ID.Value[0] >> 2) + ((u64)ID.Value[1] >> 2)) % ArrayCount(DebugState->ViewHash);
     debug_view **HashSlot = DebugState->ViewHash + HashIndex;
 
     debug_view *Result = 0;
@@ -1456,27 +1456,27 @@ DEBUGDumpStruct(u32 MemberCount, member_definition *MemberDefs, void *StructPtr,
             {
                 case MetaType_u32:
                 {
-                    _snprintf_s(TextBuffer, TextBufferLeft, TextBufferLeft, "%s: %u", Member->Name, *(u32 *)MemberPtr);
+                    snprintf(TextBuffer, TextBufferLeft, "%s: %u", Member->Name, *(u32 *)MemberPtr);
                 } break;
 
                 case MetaType_b32:
                 {
-                    _snprintf_s(TextBuffer, TextBufferLeft, TextBufferLeft, "%s: %u", Member->Name, *(b32 *)MemberPtr);
+                    snprintf(TextBuffer, TextBufferLeft, "%s: %u", Member->Name, *(b32 *)MemberPtr);
                 } break;
 
                 case MetaType_s32:
                 {
-                    _snprintf_s(TextBuffer, TextBufferLeft, TextBufferLeft, "%s: %d", Member->Name, *(s32 *)MemberPtr);
+                    snprintf(TextBuffer, TextBufferLeft, "%s: %d", Member->Name, *(s32 *)MemberPtr);
                 } break;
 
                 case MetaType_r32:
                 {
-                    _snprintf_s(TextBuffer, TextBufferLeft, TextBufferLeft, "%s: %f", Member->Name, *(r32 *)MemberPtr);
+                    snprintf(TextBuffer, TextBufferLeft, "%s: %f", Member->Name, *(r32 *)MemberPtr);
                 } break;
 
                 case MetaType_v2:
                 {
-                    _snprintf_s(TextBuffer, TextBufferLeft, TextBufferLeft, "%s: {%f,%f}",
+                    snprintf(TextBuffer, TextBufferLeft, "%s: {%f,%f}",
                                 Member->Name,
                                 ((v2 *)MemberPtr)->x,
                                 ((v2 *)MemberPtr)->y);
@@ -1484,7 +1484,7 @@ DEBUGDumpStruct(u32 MemberCount, member_definition *MemberDefs, void *StructPtr,
 
                 case MetaType_v3:
                 {
-                    _snprintf_s(TextBuffer, TextBufferLeft, TextBufferLeft, "%s: {%f,%f,%f}",
+                    snprintf(TextBuffer, TextBufferLeft, "%s: {%f,%f,%f}",
                                 Member->Name,
                                 ((v3 *)MemberPtr)->x,
                                 ((v3 *)MemberPtr)->y,
@@ -1585,7 +1585,7 @@ DEBUGEnd(debug_state *DebugState, game_input *Input, loaded_bitmap *DrawBuffer)
 
 #if 1
                 char TextBuffer[256];
-                _snprintf_s(TextBuffer, sizeof(TextBuffer),
+                snprintf(TextBuffer, sizeof(TextBuffer),
                             "%32s(%4d): %10ucy %8uh %10ucy/h",
                             Counter->BlockName,
                             Counter->LineNumber,
@@ -1601,7 +1601,7 @@ DEBUGEnd(debug_state *DebugState, game_input *Input, loaded_bitmap *DrawBuffer)
         if(DebugState->FrameCount)
         {
             char TextBuffer[256];
-            _snprintf_s(TextBuffer, sizeof(TextBuffer),
+            snprintf(TextBuffer, sizeof(TextBuffer),
                         "Last frame time: %.02fms",
                         DebugState->Frames[DebugState->FrameCount - 1].WallSecondsElapsed * 1000.0f);
             DEBUGTextLine(TextBuffer);
diff --git a/code/handmade_platform.h b/code/handmade_platform.h
index 62e944f..f4a149e 100644
--- a/code/handmade_platform.h
+++ b/code/handmade_platform.h
@@ -356,7 +356,7 @@ typedef struct platform_api
     debug_platform_write_entire_file *DEBUGWriteEntireFile;
     debug_platform_execute_system_command *DEBUGExecuteSystemCommand;
     debug_platform_get_process_state *DEBUGGetProcessState;
-#endif    debug_table *
+#endif
 
 } platform_api;
 
diff --git a/code/simple_preprocessor.cpp b/code/simple_preprocessor.cpp
index 99ff88d..e16e503 100644
--- a/code/simple_preprocessor.cpp
+++ b/code/simple_preprocessor.cpp
@@ -113,7 +113,7 @@ inline bool
 TokenEquals(token Token, char *Match)
 {
     char *At = Match;
-    for(int Index = 0;
+    for(unsigned int Index = 0;
         Index < Token.TextLength;
         ++Index, ++At)
     {
@@ -291,10 +291,10 @@ ParseMember(tokenizer *Tokenizer, token StructTypeToken, token MemberTypeToken)
             {
                 printf("   {%s, MetaType_%.*s, \"%.*s\", (u32)&((%.*s *)0)->%.*s},\n",
                        IsPointer ? "MetaMemberFlag_IsPointer" : "0",
-                       MemberTypeToken.TextLength, MemberTypeToken.Text,
-                       Token.TextLength, Token.Text,
-                       StructTypeToken.TextLength, StructTypeToken.Text,
-                       Token.TextLength, Token.Text);                
+                       (int)MemberTypeToken.TextLength, MemberTypeToken.Text,
+                       (int)Token.TextLength, Token.Text,
+                       (int)StructTypeToken.TextLength, StructTypeToken.Text,
+                       (int)Token.TextLength, Token.Text);                
             } break;
 
             case Token_Semicolon:
@@ -328,7 +328,7 @@ ParseStruct(tokenizer *Tokenizer)
     token NameToken = GetToken(Tokenizer);
     if(RequireToken(Tokenizer, Token_OpenBrace))
     {
-        printf("member_definition MembersOf_%.*s[] = \n", NameToken.TextLength, NameToken.Text);
+        printf("member_definition MembersOf_%.*s[] = \n", (int)NameToken.TextLength, NameToken.Text);
         printf("{\n");
         for(;;)
         {
@@ -385,7 +385,7 @@ main(int ArgCount, char **Args)
         "handmade_math.h",
         "handmade_world.h",
     };
-    for(int FileIndex = 0;
+    for(unsigned int FileIndex = 0;
         FileIndex < (sizeof(FileNames)/sizeof(FileNames[0]));
         ++FileIndex)
     {
