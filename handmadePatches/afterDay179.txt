diff --git a/code/handmade.cpp b/code/handmade.cpp
index d42dd5e..ffc9bd7 100644
--- a/code/handmade.cpp
+++ b/code/handmade.cpp
@@ -885,7 +885,7 @@ OverlayCycleCounters(game_memory *Memory)
             {
 #if 1
                 char TextBuffer[256];
-                _snprintf_s(TextBuffer, sizeof(TextBuffer),
+                snprintf(TextBuffer, sizeof(TextBuffer),
                             "%32s(%4d): %10ucy %8uh %10ucy/h",
                             Counter->FunctionName,
                             Counter->LineNumber,
@@ -1966,7 +1966,7 @@ UpdateDebugRecords(debug_state *DebugState, u32 CounterCount, debug_record *Coun
 }
 
 extern u32 const DebugRecords_Optimized_Count;
-debug_record DebugRecords_Optimized[];
+extern debug_record DebugRecords_Optimized[];
 
 extern "C" DEBUG_GAME_FRAME_END(DEBUGGameFrameEnd)
 {
diff --git a/code/handmade_debug.h b/code/handmade_debug.h
index 866d91a..5796ecc 100644
--- a/code/handmade_debug.h
+++ b/code/handmade_debug.h
@@ -7,9 +7,9 @@
    $Notice: (C) Copyright 2015 by Molly Rocket, Inc. All Rights Reserved. $
    ======================================================================== */
 
-#define TIMED_BLOCK__(Number, ...) timed_block TimedBlock_##Number(__COUNTER__, __FILE__, __LINE__, __FUNCTION__, ## __VA_ARGS__)
+#define TIMED_BLOCK__(Number, ...) timed_block TimedBlock_##Number(__COUNTER__, (char *)__FILE__, __LINE__, (char *)__FUNCTION__, ## __VA_ARGS__)
 #define TIMED_BLOCK_(Number, ...) TIMED_BLOCK__(Number, ## __VA_ARGS__)
-#define TIMED_BLOCK(...) TIMED_BLOCK_(__LINE__, ## __VA_ARGS__)
+#define TIMED_BLOCK(...) TIMED_BLOCK_(__LINE__) //, ## __VA_ARGS__)
 
 struct debug_record
 {
@@ -22,7 +22,7 @@ struct debug_record
     u64 HitCount_CycleCount;
 };
 
-debug_record DebugRecordArray[];
+extern debug_record DebugRecordArray[];
 
 struct timed_block
 {
diff --git a/code/handmade_intrinsics.h b/code/handmade_intrinsics.h
index fc2f913..cc41dbf 100644
--- a/code/handmade_intrinsics.h
+++ b/code/handmade_intrinsics.h
@@ -46,6 +46,19 @@ inline uint32 AtomicCompareExchangeUInt32(uint32 volatile *Value, uint32 New, ui
 
     return(Result);
 }
+inline u64 AtomicExchangeU64(u64 volatile *Value, u64 New)
+{
+    u64 Result = __sync_lock_test_and_set((u64 *)Value, New);
+
+    return(Result);
+}
+inline u64 AtomicAddU64(u64 volatile *Value, u64 Addend)
+{
+    // NOTE(casey): Returns the original value _prior_ to adding
+    u64 Result = __sync_fetch_and_add((u64 *)Value, Addend);
+
+    return(Result);
+}
 #else
 // TODO(casey): Other compilers/platforms??
 #endif
